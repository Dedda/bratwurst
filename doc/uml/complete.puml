@startuml

class FunctionFactory {
    - name : String
    - scope : String
    + createFunction() : BWFunction
}
class VariableFactory {
    - name : String
    - toEvaluate : BWExpression
    + getVariable()
}
class BWClass {
    - name : String
    - functions : FunctionFactory[]
    + BWObject : createInstance()
}
interface BWExpression {
    + getValue() : BWObject
    + getIntValue() : int
    + getValueType() : String
}
interface BWInstruction {
    + run(Scope)
}
class BWFunction {
    - instructions : BWInstruction[]
}
class BWInteger {
    - value : int
}
class BWObject {
    - bwClass : BWClass
    - variables : BWVariable[]
    - functions : BWFunction[]
    + callFunction(String) : BWObject
}
class BWString {
    - value : String
}
class BWVariable {
    - name : String
    - value : BWObject
    + getValue() : BWObject
    + getIntValue() : int
}
class Calculation {
    - leftSide : BWExpression
    - rightSide : BWExpression
}
class Condition {
    - toEvaluate : BWExpression
    - trueInstructions : BWInstruction[]
    - falseInstructions : BWInstruction[]
}
class Exit {
}
class Loop {
    - toEvaluate : BWExpression
    - instructions : BWInstruction[]
}
class PrintChar {
    - charValue : int
}
class PrintVariable {
    - variableName : String
}
class Program {
    - {static} instance : Program
    - functions : BWFunction[]
    - classes : BWClass[]
    - variables : BWVariable[]
    - instructions : BWInstruction[]
    --
    - Program()
    + {static} getInstance() : Program
    + callFunction(String)
    + run()
}
class Scope {
    - currentObject : BWObject
    - arguments : BWVariable[]
    + isInObject()
}
class VariableDeclaration {
    - variableName : String
    - targetValue : BWExpression
}

Program --> BWFunction
Program --> BWClass
Program --> BWVariable
Program --> BWInstruction

Scope --> BWObject
Scope --> BWVariable

BWClass --> FunctionFactory

BWObject --> BWClass
BWObject --> BWVariable

BWVariable --> BWObject

VariableDeclaration --> BWExpression

Calculation --> BWExpression

Condition --> BWExpression
Condition --> BWInstruction

Loop --> BWExpression
Loop --> BWInstruction

BWExpression ..|> BWInstruction
BWFunction --|> BWExpression
BWVariable --|> BWExpression
BWInteger --|> BWObject
BWString --|> BWObject

Calculation ..|> BWExpression

VariableDeclaration ..|> BWInstruction
PrintVariable ..|> BWInstruction
PrintChar ..|> BWInstruction
Exit ..|> BWInstruction
Condition ..|> BWInstruction
Loop ..|> BWInstruction

FunctionFactory --> BWFunction : creates >

VariableFactory --> BWVariable : creates >
VariableFactory --> BWObjectVariable : creates >

@enduml