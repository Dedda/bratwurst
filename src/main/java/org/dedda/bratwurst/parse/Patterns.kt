package org.dedda.bratwurst.parse

/**
 * Created by dedda on 9/28/15.
 *
 * @author dedda
 */
object Patterns {
    const val COMMENT = "^<\\(%.*"
    const val BEGIN = "^==>$"
    const val END = "^<==$"
    const val CLASS_BEGIN = "^#\\[$"
    const val CLASS_END = "^\\]$"
    const val FUNCTION_BEGIN = "^~\\{$"
    const val FUNCTION_END = "^\\}$"
    private const val FUNCTION_PARAM_FIRST = "@ (\\w+) <-- (\\w+)"
    private const val FUNCTION_PARAM_OTHERS = "& (\\w+) <-- (\\w+)"
    private const val FUNCTION_CALL_BASE = "(\\w*)\\{(\\w+)\\}"
    const val FUNCTION_CALL_NOT_TERMINAL = "$FUNCTION_CALL_BASE( $FUNCTION_PARAM_FIRST)?( $FUNCTION_PARAM_OTHERS)*"
    const val FUNCTION_CALL = "$FUNCTION_CALL_NOT_TERMINAL$"
    private const val CALCULATION_ARGUMENT = "((\\-?\\d+)|(\\w+)|($FUNCTION_CALL_NOT_TERMINAL))"
    const val CALCULATION = "$CALCULATION_ARGUMENT [\\+\\-\\*\\/] $CALCULATION_ARGUMENT"
    const val LENGTH_GET = "^\\)\\)\\w+\\)\\)$"
    const val TYPE_CHECK = "^\\w+ -\\?> \\w+$"
    const val CLASS_INSTANTIATION = "\\[(\\w+)\\]$"
    const val VARIABLE_DECLARATION = "^\\((\\w+)\\) <-- .*$"
    const val NAMING = "^\\(CALL_ME_MAYBE\\) <-- \\w+$"
    const val INCLUDE = "^%(\\w+[\\w\\.]+)%$"
    private const val PRINT_VAR = ">[^\\|]*<"
    private const val PRINT_INT = "\\|(\\w+)\\|"
    const val PRINT = "^($PRINT_VAR|$PRINT_INT)$"
    const val RETURN = "^(\\w+|($FUNCTION_CALL_NOT_TERMINAL)) -->$"
    const val CONDITION_HEAD = "^\\?\\((\\w+\\))>>$"
    const val CONDITION_SEPARATOR = "^<<$"
    const val CONDITION_END = "^\\|$"
    const val LOOP_HEAD = "^/\\((\\w+)\\)$"
    const val LOOP_END = "^\\\\$"
    const val PUSH = "^>(\\w+|($FUNCTION_CALL_NOT_TERMINAL)|($CALCULATION))>$"
    const val POP = "^<\\w+<$"
    const val COMPARE = "^\\w+ = \\w+$"
    const val COMPARE_INT = "^\\w+ <=> \\w+$"
    const val BW_STRING = "^:[^:;]*;$"
    const val BW_STRING_CONCAT = "^\\w+( <-< \\w+)+$"
    const val BW_STRING_GET_CHAR = "^\\[\\w+\\}\\w+\\]$"
    const val READ_LINE = "^<__$"
    const val CHAR_TO_INT = "^#__ \\w+$"
    const val INT_TO_CHAR = "^__# \\w+$"
    const val FILE_EXISTS = "\\?\\w+\\?$"
    const val FILE_CREATE = "^\\+\\w+\\+$"
    const val FILE_REMOVE = "^\\-\\w+\\-$"
    const val FILE_IMPORT = "^>\\|\\w+\\|<$"
    const val FILE_EXPORT = "^<\\|\\w+ > \\w+\\|>$"
    const val ASSERT_TRUE = "^\\{\\[(\\w+)\\]\\}$"
    const val ASSERT_FALSE = "^\\{\\[!(\\w+)\\]\\}$"
    const val ASSERT_EQUALS = "^\\{\\[(\\w+) == (\\w+)\\]\\}$"
    const val ASSERT_NOT_EQUALS = "^\\{\\[(\\w+) != (\\w+)\\]\\}$"
}